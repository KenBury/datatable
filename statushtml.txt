import pandas as pd
from typing import Union
from pathlib import Path
import json

def generate_status_page(df: pd.DataFrame, output_path: str = "status_summary.html") -> None:
    """
    Generate an HTML page with a DataTable showing status summaries from a pandas DataFrame.
    Missing required columns will be automatically created and filled with zeros.
    Features grouped headers for Live and Rehearsal statuses.
    
    Args:
        df: Pandas DataFrame containing status data
        output_path: Path where the HTML file should be saved
    """
    # Make a copy of the DataFrame to avoid modifying the original
    df = df.copy()
    
    # Define required columns
    required_columns = [
        'folder_name',
        'Planning',
        'Live: Active',
        'Live: Paused',
        'Live: Complete',
        'Live: Canceled',
        'Rehearsal: Active',
        'Rehearsal: Paused'
    ]
    
    # Check for missing columns and create them with zeros
    for col in required_columns:
        if col not in df.columns:
            print(f"Creating missing column '{col}' with zero values")
            df[col] = 0
    
    # Convert DataFrame to list of dictionaries for JSON serialization
    data = df.fillna(0).to_dict('records')
    
    # Convert data to JavaScript array string
    json_data = json.dumps(data, indent=4)
    
    html_template = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Status Summary</title>
    
    <!-- DataTables CSS -->
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.7/css/jquery.dataTables.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css">
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    
    <!-- DataTables JS -->
    <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap5.min.js"></script>

    <style>
        .progress {{
            height: 20px;
            min-width: 150px;
        }}
        .progress-bar {{
            transition: width 0.6s ease;
        }}
        .status-group {{
            background-color: #f8f9fa;
            font-weight: bold;
        }}
        .numeric-cell {{
            text-align: right;
        }}
        thead tr th {{
            text-align: center;
        }}
        .top-header {{
            border-bottom: none !important;
        }}
        .bottom-header {{
            border-top: none !important;
        }}
    </style>
</head>
<body>
    <div class="container mt-5">
        <h2 class="mb-4">Status Summary by Folder</h2>
        <table id="statusTable" class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th rowspan="2" class="align-middle">Folder</th>
                    <th rowspan="2" class="align-middle">Planning</th>
                    <th colspan="4" class="text-center top-header">Live</th>
                    <th colspan="2" class="text-center top-header">Rehearsal</th>
                    <th rowspan="2" class="align-middle">% Complete</th>
                    <th rowspan="2" class="align-middle">Total</th>
                </tr>
                <tr>
                    <th class="bottom-header">Active</th>
                    <th class="bottom-header">Paused</th>
                    <th class="bottom-header">Complete</th>
                    <th class="bottom-header">Canceled</th>
                    <th class="bottom-header">Active</th>
                    <th class="bottom-header">Paused</th>
                </tr>
            </thead>
            <tbody>
                <!-- Data will be populated by JavaScript -->
            </tbody>
        </table>
    </div>

    <script>
        const rawData = {json_data};

        // Calculate totals and add completion percentage
        const tableData = rawData.map(row => {{
            // Calculate total (excluding folder_name field)
            const total = Object.entries(row)
                .filter(([key, val]) => key !== 'folder_name' && typeof val === 'number')
                .reduce((sum, [_, val]) => sum + val, 0);

            // Calculate completion percentage based on Live statuses only
            const liveTotal = row["Live: Active"] + row["Live: Paused"] + 
                            row["Live: Complete"] + row["Live: Canceled"];
            const percentComplete = liveTotal === 0 ? 0 : 
                ((row["Live: Complete"] / liveTotal) * 100).toFixed(1);

            return {{
                ...row,
                "folder": row.folder_name,
                "percentComplete": percentComplete,
                "Total": total
            }};
        }});

        $(document).ready(function() {{
            $('#statusTable').DataTable({{
                data: tableData,
                columns: [
                    {{ data: 'folder' }},
                    {{ 
                        data: 'Planning',
                        className: 'numeric-cell'
                    }},
                    {{ 
                        data: 'Live: Active',
                        className: 'numeric-cell'
                    }},
                    {{ 
                        data: 'Live: Paused',
                        className: 'numeric-cell'
                    }},
                    {{ 
                        data: 'Live: Complete',
                        className: 'numeric-cell'
                    }},
                    {{ 
                        data: 'Live: Canceled',
                        className: 'numeric-cell'
                    }},
                    {{ 
                        data: 'Rehearsal: Active',
                        className: 'numeric-cell'
                    }},
                    {{ 
                        data: 'Rehearsal: Paused',
                        className: 'numeric-cell'
                    }},
                    {{ 
                        data: 'percentComplete',
                        render: function(data, type, row) {{
                            if (type === 'display') {{
                                let colorClass = 'bg-danger';
                                if (data >= 70) colorClass = 'bg-success';
                                else if (data >= 40) colorClass = 'bg-warning';

                                return `<div class="progress">
                                         <div class="progress-bar ${{colorClass}}" 
                                              role="progressbar" 
                                              style="width: ${{data}}%;" 
                                              aria-valuenow="${{data}}" 
                                              aria-valuemin="0" 
                                              aria-valuemax="100">
                                           ${{data}}%
                                         </div>
                                       </div>`;
                            }}
                            return data;
                        }}
                    }},
                    {{ 
                        data: 'Total',
                        className: 'numeric-cell'
                    }}
                ],
                createdRow: function(row, data, dataIndex) {{
                    if (data.folder === 'Total') {{
                        $(row).addClass('table-secondary fw-bold');
                    }}
                }},
                pageLength: 10,
                ordering: true,
                searching: true,
                responsive: true,
                dom: 'Bfrtip',
                info: true,
                order: [[0, 'asc']]
            }});
        }});
    </script>
</body>
</html>"""

    # Write the HTML file
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(html_template)
