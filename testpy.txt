def generate_html(template_data, tasks):
    html = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Task Scheduler</title>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.3/css/jquery.dataTables.min.css"/>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/buttons/2.2.2/css/buttons.dataTables.min.css"/>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.21/js/jquery.dataTables.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables.net-buttons/2.2.2/js/dataTables.buttons.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables.net-buttons/2.2.2/js/buttons.html5.min.js"></script>
    
    <style>
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .controls {
            margin-bottom: 20px;
        }
        .template-info {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 15px;
            margin-bottom: 20px;
        }
        .template-info h2 {
            margin-top: 0;
            margin-bottom: 15px;
            color: #333;
        }
        .template-details {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
        }
        .template-detail {
            background: white;
            padding: 10px;
            border-radius: 4px;
            border: 1px solid #e9ecef;
        }
        .detail-label {
            font-weight: bold;
            color: #495057;
            margin-bottom: 5px;
        }
        .dt-buttons {
            margin-bottom: 10px;
        }
        .dt-button {
            padding: 5px 10px;
            margin-right: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            background-color: #f8f9fa;
            cursor: pointer;
        }
        .dt-button:hover {
            background-color: #e9ecef;
        }
        .description-content {
            max-width: 400px;
            overflow-x: auto;
        }
        .description-content table {
            border-collapse: collapse;
            margin: 10px 0;
        }
        .description-content td, .description-content th {
            border: 1px solid #ddd;
            padding: 4px 8px;
        }
        .description-content ul, .description-content ol {
            margin: 5px 0;
            padding-left: 20px;
        }
        .description-content a {
            color: #0066cc;
            text-decoration: none;
        }
        .description-content a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Task Scheduler</h1>
        
        <div class="template-info">
            <h2>Template Information</h2>
            <div class="template-details">
                <div class="template-detail">
                    <div class="detail-label">Template ID:</div>
                    <div id="template-id">{}</div>
                </div>
                <div class="template-detail">
                    <div class="detail-label">Template Name:</div>
                    <div id="template-name">{}</div>
                </div>
                <div class="template-detail">
                    <div class="detail-label">Version:</div>
                    <div id="template-version">{}</div>
                </div>
            </div>
        </div>

        <div class="controls">
            <input type="datetime-local" id="date-time-input" step="60" />
            <button id="transform-button">Set Start</button>
        </div>
        <table id="taskTable" class="display">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Start Display</th>
                    <th>Offset (min)</th>
                    <th>Description</th>
                </tr>
            </thead>
        </table>
    </div>

    <script>
        function addOffset(dateTime, offsetMinutes) {
            const date = new Date(dateTime);
            const offset = parseInt(offsetMinutes, 10);
            date.setMinutes(date.getMinutes() + offset);
            
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            
            return `{}-{}-{}T{}:{}`.format(year, month, day, hours, minutes);
        }

        $(document).ready(function() {
            // Populate template information
            $('#template-id').text('{template_data[id]}');
            $('#template-name').text('{template_data[name]}');
            $('#template-version').text('{template_data[version]}');

            function initializeTable(dateTime = null) {
                return $('#taskTable').DataTable({
                    data: [
                        {tasks_data}
                    ],
                    dom: 'Bfrtip',
                    buttons: [
                        {
                            extend: 'pdf',
                            text: 'Export to PDF',
                            title: function() {
                                return `Task Schedule - {template_data[name]} (v{template_data[version]})`;
                            },
                            filename: function() {
                                const now = new Date();
                                return `task_schedule_{template_data[id]}_${now.getFullYear()}${String(now.getMonth() + 1).padStart(2, '0')}${String(now.getDate()).padStart(2, '0')}`;
                            },
                            customize: function(doc) {
                                // Add template information to PDF
                                doc.content.splice(1, 0, {
                                    text: [
                                        {text: 'Template ID: ', bold: true}, {text: '{template_data[id]}\\n'},
                                        {text: 'Template Name: ', bold: true}, {text: '{template_data[name]}\\n'},
                                        {text: 'Version: ', bold: true}, {text: '{template_data[version]}\\n\\n'}
                                    ],
                                    margin: [0, 10, 0, 10]
                                });
                                doc.defaultStyle.fontSize = 10;
                                doc.styles.tableHeader.fontSize = 12;
                                doc.styles.tableHeader.bold = true;
                            },
                            exportOptions: {
                                columns: [0, 1, 2, 3, 4],
                                format: {
                                    body: function(data, row, column) {
                                        return data;
                                    }
                                }
                            }
                        }
                    ],
                    columns: [
                        { data: 'id' },
                        { data: 'name' },
                        { 
                            data: null,
                            render: function(data, type, row) {
                                return dateTime ? addOffset(dateTime, row.start_offset) : '';
                            }
                        },
                        { data: 'start_offset' },
                        { 
                            data: 'description',
                            render: function(data, type, row) {
                                if (type === 'display') {
                                    return `<div class="description-content">${data}</div>`;
                                }
                                return data;
                            }
                        }
                    ]
                });
            }

            let table = initializeTable();

            $('#transform-button').on('click', function() {
                const dateTime = $('#date-time-input').val();
                if (dateTime) {
                    table.destroy();
                    table = initializeTable(dateTime);
                }
            });
        });
    </script>
</body>
</html>
    """

    tasks_data = ",\n".join(["""
        {
            id: {id},
            name: "{name}",
            description: `{description}`,
            start_offset: "{start_offset}"
        }
    """.format(
        id=task["id"],
        name=task["name"],
        description=task["description"],
        start_offset=task["start_offset"]
    ) for task in tasks])

    return html.format(
        template_data["id"],
        template_data["name"],
        template_data["version"],
        tasks_data
    )

# Sample template data
template_data = {
    "id": "TEMP-001",
    "name": "Standard Operating Procedure",
    "version": "1.0.3"
}

# Sample tasks with HTML content in descriptions
tasks = [
    {
        "id": 1,
        "name": "Task 1",
        "description": """
            <div style="color: #2c5282;">
                <h4>Important Task</h4>
                <ul>
                    <li>First item</li>
                    <li>Second item with <span style="color: red;">urgent</span> flag</li>
                </ul>
                <table>
                    <tr><th>Header 1</th><th>Header 2</th></tr>
                    <tr><td>Data 1</td><td>Data 2</td></tr>
                </table>
                <a href="#">View details</a>
            </div>
        """,
        "start_offset": "360"
    },
    {
        "id": 2,
        "name": "Task 2",
        "description": """
            <div style="color: #2b6cb0;">
                <p>Regular task with:</p>
                <ol>
                    <li>Numbered item 1</li>
                    <li>Numbered item 2</li>
                </ol>
                <p style="background-color: #fff3cd; padding: 5px;">Warning: Requires review</p>
            </div>
        """,
        "start_offset": "30"
    }
]

if __name__ == "__main__":
    html_output = generate_html(template_data, tasks)
    with open('output.html', 'w', encoding='utf-8') as file:
        file.write(html_output)
if __name__ == "__main__":
    html_output = generate_html(template_data, tasks)
    with open('output.html', 'w', encoding='utf-8') as file:
        file.write(html_output)
